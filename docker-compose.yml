version: '3.7'

services:
    # MYSQL
    # ========================
    #  Chaque conteneur commence avec un nom qui lui est propre ; dans notre cas, notre premier conteneur se nommera db
    db:
        platform: linux/x86_64
        image: mysql:latest
        ports:
            - 3306:3306
        container_name: ${MYSQL_CONTAINER_NAME} #names our container so we can reference it from outside the docker network
        # les conteneurs Docker ne sont pas faits pour faire fonctionner des services stateful, et une base de données
        # est par définition un service stateful. Volumes permet de stocker l'ensemble du contenu du dossier/var/lib/mysql
        # dans un disque persistant. Et donc, de pouvoir garder les données en local sur notre host.

        # mysql-data est un volume créé par Docker directement, qui permet d'écrire les données sur le disque hôte sans spécifier
        # l'emplacement exact. Vous auriez pu aussi faire un /data/mysql:/var/lib/mysql qui serait aussi fonctionnel.
        volumes:
            - ${MYSQL_CONTAINER_INIT}:/docker-entrypoint-initdb.d
            - ${MYSQL_CONTAINER_VOLUME}:/var/lib/mysql #connects the mysql-data volume to the location /var/lib/mysql inside the docker container. This means that
            # the information in the database will be persisted even if we shut down or remove our docker container

        # si le serveur MySQL s'arrête, celui-ci  redémarrera automatiquement grâce à l'argument restart: always.
       # restart: always
        environment:
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
            MYSQL_DATABASE: ${MYSQL_DATABASE}
            MYSQL_USER: ${MYSQL_USER}
            MYSQL_PASSWORD: ${MYSQL_PASSWORD}
        env_file:
          - ".env"
        networks:
            - web

    # Redis
    # ========================

    redis:
        image: redis:latest
        container_name: ${REDIS_CONTAINER_NAME}
        hostname: redis
        command: ["redis-server --daemonize yes", "--daemonize", "yes"]
        volumes:
            - ${REDIS_CONTAINER_VOLUME}:/var/lib/redis
            - ${REDIS_CONF_FILE}:/etc/redis/redis.conf
        environment:
            - REDIS_REPLICATION_MODE=master
        ports:
            - "6379:6379"
        networks:
            - web

    # PHPMYADMIN
    # ========================
    #phpmyadmin est attaché au container « db », et il sera accessible sur le port 8181
    phpmyadmin:
        image: phpmyadmin/phpmyadmin
        container_name: ${PHPMYADMIN_CONTAINER_NAME}
        links:
            - db
        ports:
            - 8181:80
        # depends_on, nous permet de créer une dépendance entre deux conteneurs. Ainsi, Docker démarrera le service db avant de démarrer le service Wordpress
        depends_on:
            - db
        env_file:
            - ".env"
        networks:
            - web

    # PHP
    # ========================
    php:
        build: docker/php # Get our Dockerfile configuration
        container_name: ${UBUNTU_CONTAINER_NAME}
        links:
            - db:mysqldb
            - redis:redis
            - elasticsearch:elasticsearch
            - kibana:kibana
        depends_on:
            - db
        volumes:
            - ${PROJECT_PATH}:/var/www/html/bantu-dico
        ports:
            - 80:80
        env_file:
            - ".env"
        networks:
            - web

    # ELASTICSEARCH + KIBANA
    # ========================
    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.14.2
        container_name: elasticsearch
        # restart: always
        environment:
            - cluster.name=docker-cluster
            - bootstrap.memory_lock=true
            - discovery.type=single-node
            - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
        ulimits:
            memlock:
                soft: -1
                hard: -1
        volumes:
            - ${ELASTICSEARCH_PATH_VOLUME}:/usr/share/elasticsearch/data
        ports:
            - 9200:9200
        networks:
            - web

    kibana:
        image: docker.elastic.co/kibana/kibana:6.8.10
        container_name: kibana
        environment:
            - '%env(ELASTICSEARCH_URL)%'
        networks:
            - web
        depends_on:
            - elasticsearch
networks:
    web:
        driver: bridge
